/* eslint-disable */
import { Timestamp } from "../../google/protobuf/timestamp.js";
import { PayloadChat } from "./event_payload.js";
import { Environment_ID } from "./env.js";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "hexes.v1";

export interface Event {
  meta: Event_Meta | undefined;
  chat: PayloadChat | undefined;
}

export interface Event_Meta {
  env: Environment_ID | undefined;
  /** Timestamp generated by a client before sending an event. */
  clientTime: Date | undefined;
  /** Timestamp generated by a server upon receiving an event. */
  serverTime: Date | undefined;
}

function createBaseEvent(): Event {
  return { meta: undefined, chat: undefined };
}

export const Event = {
  encode(message: Event, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.meta !== undefined) {
      Event_Meta.encode(message.meta, writer.uint32(10).fork()).ldelim();
    }
    if (message.chat !== undefined) {
      PayloadChat.encode(message.chat, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.meta = Event_Meta.decode(reader, reader.uint32());
          break;
        case 2:
          message.chat = PayloadChat.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      meta: isSet(object.meta) ? Event_Meta.fromJSON(object.meta) : undefined,
      chat: isSet(object.chat) ? PayloadChat.fromJSON(object.chat) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    message.meta !== undefined &&
      (obj.meta = message.meta ? Event_Meta.toJSON(message.meta) : undefined);
    message.chat !== undefined &&
      (obj.chat = message.chat ? PayloadChat.toJSON(message.chat) : undefined);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.meta =
      object.meta !== undefined && object.meta !== null
        ? Event_Meta.fromPartial(object.meta)
        : undefined;
    message.chat =
      object.chat !== undefined && object.chat !== null
        ? PayloadChat.fromPartial(object.chat)
        : undefined;
    return message;
  },
};

function createBaseEvent_Meta(): Event_Meta {
  return { env: undefined, clientTime: undefined, serverTime: undefined };
}

export const Event_Meta = {
  encode(
    message: Event_Meta,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.env !== undefined) {
      Environment_ID.encode(message.env, writer.uint32(10).fork()).ldelim();
    }
    if (message.clientTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.clientTime),
        writer.uint32(18).fork()
      ).ldelim();
    }
    if (message.serverTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.serverTime),
        writer.uint32(26).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Event_Meta {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_Meta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.env = Environment_ID.decode(reader, reader.uint32());
          break;
        case 2:
          message.clientTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32())
          );
          break;
        case 3:
          message.serverTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32())
          );
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Event_Meta {
    return {
      env: isSet(object.env) ? Environment_ID.fromJSON(object.env) : undefined,
      clientTime: isSet(object.clientTime)
        ? fromJsonTimestamp(object.clientTime)
        : undefined,
      serverTime: isSet(object.serverTime)
        ? fromJsonTimestamp(object.serverTime)
        : undefined,
    };
  },

  toJSON(message: Event_Meta): unknown {
    const obj: any = {};
    message.env !== undefined &&
      (obj.env = message.env ? Environment_ID.toJSON(message.env) : undefined);
    message.clientTime !== undefined &&
      (obj.clientTime = message.clientTime.toISOString());
    message.serverTime !== undefined &&
      (obj.serverTime = message.serverTime.toISOString());
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Event_Meta>, I>>(
    object: I
  ): Event_Meta {
    const message = createBaseEvent_Meta();
    message.env =
      object.env !== undefined && object.env !== null
        ? Environment_ID.fromPartial(object.env)
        : undefined;
    message.clientTime = object.clientTime ?? undefined;
    message.serverTime = object.serverTime ?? undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = t.seconds * 1_000;
  millis += t.nanos / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
