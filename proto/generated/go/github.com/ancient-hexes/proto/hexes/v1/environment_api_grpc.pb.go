// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: hexes/v1/environment_api.proto

package hexesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnvironmentAPIClient is the client API for EnvironmentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentAPIClient interface {
	List(ctx context.Context, in *Environment_ListRequest, opts ...grpc.CallOption) (EnvironmentAPI_ListClient, error)
}

type environmentAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentAPIClient(cc grpc.ClientConnInterface) EnvironmentAPIClient {
	return &environmentAPIClient{cc}
}

func (c *environmentAPIClient) List(ctx context.Context, in *Environment_ListRequest, opts ...grpc.CallOption) (EnvironmentAPI_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnvironmentAPI_ServiceDesc.Streams[0], "/hexes.v1.EnvironmentAPI/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentAPIListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnvironmentAPI_ListClient interface {
	Recv() (*Environment_ListResponse, error)
	grpc.ClientStream
}

type environmentAPIListClient struct {
	grpc.ClientStream
}

func (x *environmentAPIListClient) Recv() (*Environment_ListResponse, error) {
	m := new(Environment_ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnvironmentAPIServer is the server API for EnvironmentAPI service.
// All implementations must embed UnimplementedEnvironmentAPIServer
// for forward compatibility
type EnvironmentAPIServer interface {
	List(*Environment_ListRequest, EnvironmentAPI_ListServer) error
	mustEmbedUnimplementedEnvironmentAPIServer()
}

// UnimplementedEnvironmentAPIServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentAPIServer struct {
}

func (UnimplementedEnvironmentAPIServer) List(*Environment_ListRequest, EnvironmentAPI_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEnvironmentAPIServer) mustEmbedUnimplementedEnvironmentAPIServer() {}

// UnsafeEnvironmentAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentAPIServer will
// result in compilation errors.
type UnsafeEnvironmentAPIServer interface {
	mustEmbedUnimplementedEnvironmentAPIServer()
}

func RegisterEnvironmentAPIServer(s grpc.ServiceRegistrar, srv EnvironmentAPIServer) {
	s.RegisterService(&EnvironmentAPI_ServiceDesc, srv)
}

func _EnvironmentAPI_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Environment_ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentAPIServer).List(m, &environmentAPIListServer{stream})
}

type EnvironmentAPI_ListServer interface {
	Send(*Environment_ListResponse) error
	grpc.ServerStream
}

type environmentAPIListServer struct {
	grpc.ServerStream
}

func (x *environmentAPIListServer) Send(m *Environment_ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EnvironmentAPI_ServiceDesc is the grpc.ServiceDesc for EnvironmentAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hexes.v1.EnvironmentAPI",
	HandlerType: (*EnvironmentAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _EnvironmentAPI_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hexes/v1/environment_api.proto",
}
